#include <iostream> 
using namespace std; 
#define maxval 10000 
  
struct Point 
{ 
    int x; 
    int y; 
}; 
bool segment(Point p, Point q, Point r) 
{ 
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
            q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y)) 
        return true; 
    return false; 
} 
int orientation(Point p, Point q, Point r) 
{ 
    int val = (q.y - p.y) * (r.x - q.x) - 
              (q.x - p.x) * (r.y - q.y); 
  
    if (val == 0) return 0;
    return (val > 0)? 1: 2;
} 
bool intersect(Point p1, Point q1, Point p2, Point q2) 
{ 
    int o1 = orientation(p1, q1, p2); 
    int o2 = orientation(p1, q1, q2); 
    int o3 = orientation(p2, q2, p1); 
    int o4 = orientation(p2, q2, q1); 
    if (o1 != o2 && o3 != o4) 
        return true; 

    if (o1 == 0 && segment(p1, p2, q1)) 
        return true; 
    if (o2 == 0 && segment(p1, q2, q1)) 
        return true; 
    if (o3 == 0 && segment(p2, p1, q2)) 
        return true; 
    if (o4 == 0 && segment(p2, q1, q2)) 
        return true; 
    return false;
} 
  
bool inside(Point polygon[], int n, Point p) 
{ 

    if (n < 3)  
        return false; 
  
    Point extreme = {maxval, p.y}; 

    int count = 0, i = 0; 
    do
    { 
        int next = (i+1)%n; 

        if (intersect(polygon[i], polygon[next], p, extreme)) 
        { 

            if (orientation(polygon[i], p, polygon[next]) == 0) 
               return segment(polygon[i], p, polygon[next]); 
  
            count++; 
        } 
        i = next; 
    } while (i != 0); 
    if(count % 2 == 1)
    {
      return true;
    }
    else{
    return false;
    }
} 

int main() 
{ 
    Point poly[] = {{0, 0}, {10, 0}, {10, 10}, {0, 10}}; 
    int n = sizeof(poly)/sizeof(poly[0]); 
    Point p = {20, 20}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    p = {5, 5}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    p = {3, 3}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    p = {5, 1}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    p = {8, 1}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    p = {-1,10}; 
    inside(poly, n, p)? cout << "Yes \n": cout << "No \n"; 
  
    return 0; 
}
